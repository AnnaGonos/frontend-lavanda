import React, {useEffect, useState} from 'react';
import {useAuthContext} from '../../context/AuthContext';
import {Link, useNavigate} from 'react-router-dom';
import axios from 'axios';
import './CartPage.css';
import {useNotification} from "../../context/NotificationContext";
import PageMeta from "../../components/PageMeta/PageMeta";
import Breadcrumbs from "../../components/Breadcrumbs/Breadcrumbs";
import SectionHeader from "../../components/Partials/SectionHeader";
import {OrderFormData} from "../../types/order.types";
import {CartItem} from "../../types/product.types";
import {DeliveryAddressSection} from "../../components/AddressInput/DeliveryAddressSection";
import {User} from "../../types/user.type";
import {LoadingOverlay} from "../../components/LoadingOverlay/LoadingOverlay";
import {sendOrderNotification} from "../../services/telegram.service";
import { sendOrderConfirmationEmail } from '../../services/emailService.service';


export const CheckoutPage: React.FC = () => {
    const { token, openAuthModal, user, setUser } = useAuthContext();
    const {showNotification} = useNotification();
    const [cartItems, setCartItems] = useState<CartItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [submitting, setSubmitting] = useState(false);
    const navigate = useNavigate();

    const [formData, setFormData] = useState<OrderFormData>({
        deliveryMethod: '—Å–∞–º–æ–≤—ã–≤–æ–∑',
        recipientName: '',
        recipientPhone: '',
        deliveryAddress: '',
        deliveryDate: '',
        deliveryPeriod: '–¥–µ–Ω—å',
        comment: '',
        paymentMethod: 'cash',
    });

    const [isSelfRecipient, setIsSelfRecipient] = useState(false);
    const [useBonus, setUseBonus] = useState(false);
    const [bonusToUse, setBonusToUse] = useState<number>(0);

    useEffect(() => {
        if (useBonus && user) {
            const maxByBalance = user.bonusPoints || 0;
            const maxByOrder = getTotalAmount(); // —Å—É–º–º–∞  —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
            setBonusToUse(Math.min(maxByBalance, maxByOrder));
        } else {
            setBonusToUse(0);
        }
    }, [useBonus, user, formData.deliveryMethod, cartItems]);
    useEffect(() => {
        const fetchCart = async () => {
            if (!token) return;

            try {
                const res = await axios.get('https://backend-lavanda.onrender.com/api/cart/', {
                    headers: {Authorization: `Bearer ${token}`},
                });
                setCartItems(res.data);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã', 'error');
            } finally {
                setLoading(false);
            }
        };

        fetchCart();
    }, [token]);
    useEffect(() => {
        const fetchUserData = async () => {
            if (!token) return;

            try {
                const res = await axios.get<User>('https://backend-lavanda.onrender.com/api/users/me', {
                    headers: { Authorization: `Bearer ${token}` },
                });

                const userData = res.data;
                console.log('–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userData);

                setUser(userData);
                localStorage.setItem('user', JSON.stringify(userData));
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'error');
            }
        };

        fetchUserData();
    }, [token, setUser]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
        const {name, value} = e.target;
        setFormData(prev => ({...prev, [name]: value}));
    };
    const handleSelfRecipientChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const checked = e.target.checked;
        setIsSelfRecipient(checked);

        if (checked && user) {
            setFormData(prev => ({
                ...prev,
                recipientName: user.firstName || '',
                recipientPhone: user.phone || '',
            }));
        } else if (!checked) {
            setFormData(prev => ({
                ...prev,
                recipientName: '',
                recipientPhone: '',
            }));
        }
    };
    const validateForm = (): boolean => {
        const {recipientName, recipientPhone, deliveryMethod, deliveryAddress, deliveryDate} = formData;

        if (!isSelfRecipient && !recipientName.trim()) {
            showNotification('–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è', 'error');
            return false;
        }

        if (!isSelfRecipient && !recipientPhone.trim()) {
            showNotification('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è', 'error');
            return false;
        }

        if (deliveryMethod === '–¥–æ—Å—Ç–∞–≤–∫–∞' && !deliveryAddress?.trim()) {
            showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ', 'error');
            return false;
        }

        if (!deliveryDate) {
            showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏', 'error');
            return false;
        }

        const today = new Date().toISOString().split('T')[0];
        if (deliveryDate < today) {
            showNotification('–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º', 'error');
            return false;
        }

        if (useBonus && bonusToUse > (user?.bonusPoints || 0)) {
            showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤', 'error');
            return false;
        }

        if (bonusToUse > getTotalAmount()) {
            showNotification('–ù–µ–ª—å–∑—è —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞', 'error');
            return false;
        }

        return true;
    };
    const getTotalAmount = () => {
        let total = cartItems.reduce((sum, item) => {
            const price = item.product.discount ?? item.product.price;
            return sum + price * item.quantity;
        }, 0);

        if (formData.deliveryMethod === '–¥–æ—Å—Ç–∞–≤–∫–∞') {
            total += 400;
        }

        return total;
    };
    const getFinalAmount = () => {
        const total = getTotalAmount();
        return useBonus && bonusToUse ? total - bonusToUse : total;
    };

    const getBonusEarned = () => {
        const finalAmount = getFinalAmount();
        return Math.floor(finalAmount * (user?.bonusCardLevel || 1) * 0.01);
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!token || !user) return;

        if (!validateForm()) return;

        setSubmitting(true);

        try {
            const res = await axios.post(
                'https://backend-lavanda.onrender.com/api/order/create-from-cart',
                {
                    ...formData,
                    useBonusPoints: useBonus ? bonusToUse : 0,
                },
                {
                    headers: { Authorization: `Bearer ${token}` },
                }
            );

            try {
                await sendOrderNotification(res.data);
                console.log('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.');
            } catch (notificationError: any) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram:', notificationError?.message || notificationError);
            }

            try {
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç—É...');

                const emailResult = await sendOrderConfirmationEmail(res.data, user.email, user.firstName);

                if (emailResult.success) {
                    console.log('‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –Ω–∞', user.email);
                } else {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:', emailResult.error);
                }
            } catch (emailError: any) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', emailError);
            }

            showNotification('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!', 'success');
            navigate(`/lk/order/success/${res.data.orderNumber}`);
        } catch (error: any) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
            showNotification(
                error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
                'error'
            );
        } finally {
            setSubmitting(false);
        }
    };

    const totalQuantity = cartItems.reduce((sum, item) => sum + item.quantity, 0);

    if (!token) {
        return (
            <div className="checkout-empty">
                <PageMeta title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞" description="–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"/>
                <Breadcrumbs currentTitle="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"/>
                <h2>–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –≤–æ–π–¥–∏—Ç–µ</h2>
                <button onClick={openAuthModal} className="checkout-login-button">
                    –í–æ–π—Ç–∏
                </button>
            </div>
        );
    }

    if (loading) {
        return <LoadingOverlay text="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã..."/>;
    }

    if (cartItems.length === 0) {
        return (
            <>
                <PageMeta title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞" description="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"/>
                <Breadcrumbs currentTitle="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"/>

                <section className="checkout">
                    <h2>–í –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç</h2>
                    <Link to="/catalog" className="checkout-back-button">
                        –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
                    </Link>
                </section>
            </>
        );
    }

    return (
        <>
            <PageMeta title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞" description="–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞"/>
            <Breadcrumbs currentTitle="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"/>

            <section className="checkout">
                <SectionHeader title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"/>

                <form onSubmit={handleSubmit} className="checkout__form">
                    <div className="checkout__details">
                        <div className="checkout__section">
                            <div className="checkout__header">
                                <h3>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</h3>
                                <label className="checkout__self-recipient">
                                    <input type="checkbox"
                                           checked={isSelfRecipient}
                                           onChange={handleSelfRecipientChange}
                                    />
                                    –Ø —Å–∞–º(-–∞) –ø–æ–ª—É—á—É –∑–∞–∫–∞–∑
                                </label>
                            </div>

                            {!isSelfRecipient && (
                                <>
                                    <div className="checkout__content">
                                        <input type="text" name="recipientName"
                                            placeholder="–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è" value={formData.recipientName}
                                            onChange={handleChange} required/>
                                        <input type="tel" name="recipientPhone" placeholder="+7 (999) 999-99-99"
                                            value={formData.recipientPhone} onChange={handleChange} required/>
                                    </div>
                                </>
                            )}

                            {isSelfRecipient && user && (
                                <div className="checkout__self-info">
                                    <p><strong>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> {user.firstName} {user.lastName || ''}</p><br/>
                                    <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {user.phone}</p>
                                </div>
                            )}
                        </div>

                        <div className="checkout__section">
                            <h3>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ñ–ª–æ—Ä–∏—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞</h3>

                            <textarea name="comment" value={formData.comment} onChange={handleChange}
                                      placeholder="–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏–µ–∑–¥–æ–º, —É–ø–∞–∫—É–π—Ç–µ –≤ –ø–æ–¥–∞—Ä–æ—á–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É..."/>
                        </div>

                        <div className="checkout__section">
                            <h3>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è</h3>
                            <div className="checkout__radio-group">
                                <label>
                                    <input
                                        type="radio"
                                        name="deliveryMethod"
                                        value="—Å–∞–º–æ–≤—ã–≤–æ–∑"
                                        checked={formData.deliveryMethod === '—Å–∞–º–æ–≤—ã–≤–æ–∑'}
                                        onChange={handleChange}
                                    />
                                    –°–∞–º–æ–≤—ã–≤–æ–∑
                                </label>
                                <label>
                                    <input
                                        type="radio"
                                        name="deliveryMethod"
                                        value="–¥–æ—Å—Ç–∞–≤–∫–∞"
                                        checked={formData.deliveryMethod === '–¥–æ—Å—Ç–∞–≤–∫–∞'}
                                        onChange={handleChange}
                                    />
                                    –î–æ—Å—Ç–∞–≤–∫–∞
                                </label>
                            </div>

                            {formData.deliveryMethod === '–¥–æ—Å—Ç–∞–≤–∫–∞' && (
                                <DeliveryAddressSection
                                    onAddressChange={(full) => setFormData(prev => ({...prev, deliveryAddress: full}))}
                                    initialAddress={formData.deliveryAddress}
                                />
                            )}
                        </div>

                        <div className="checkout__section">
                            <h3>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</h3>

                            <div className="checkout__content">
                                <input
                                    type="date"
                                    name="deliveryDate"
                                    value={formData.deliveryDate}
                                    onChange={handleChange}
                                    min={new Date().toISOString().split('T')[0]}
                                    required
                                />
                                <select name="deliveryPeriod" value={formData.deliveryPeriod} onChange={handleChange}
                                        required>
                                    <option value="—É—Ç—Ä–æ">–£—Ç—Ä–æ (9:00‚Äì12:00)</option>
                                    <option value="–¥–µ–Ω—å">–î–µ–Ω—å (12:00‚Äì18:00)</option>
                                    <option value="–≤–µ—á–µ—Ä">–í–µ—á–µ—Ä (18:00‚Äì21:00)</option>
                                </select>
                            </div>

                        </div>

                        <div className="checkout__section">
                            <h3>–û–ø–ª–∞—Ç–∞</h3>
                            <div className="checkout__radio-group">
                                <label>
                                    <input
                                        type="radio"
                                        name="paymentMethod"
                                        value="cash"
                                        checked={formData.paymentMethod === 'cash'}
                                        onChange={handleChange}
                                    />
                                    –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
                                </label>
                                <label>
                                    <input
                                        type="radio"
                                        name="paymentMethod"
                                        value="yookassa"
                                        checked={formData.paymentMethod === 'yookassa'}
                                        onChange={handleChange}
                                    />
                                    –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞
                                </label>
                            </div>
                        </div>

                        <div className="checkout__section">
                            <h3>–ë–æ–Ω—É—Å—ã</h3>

                            <label className="checkout__bonus-toggle">
                                <input
                                    type="checkbox"
                                    checked={useBonus}
                                    onChange={(e) => setUseBonus(e.target.checked)}
                                />
                                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã
                            </label>

                            {useBonus && (
                                <div className="checkout__bonus-info">
                                    <p><strong>–°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</strong> {bonusToUse} ‚ÇΩ</p>
                                    <small>1 –±–æ–Ω—É—Å = 1 ‚ÇΩ</small>
                                </div>
                            )}

                            <div className="checkout__bonus-info">
                                <p><strong>–í–∞—à–∏ –±–æ–Ω—É—Å—ã:</strong> {user?.bonusPoints ?? 0} ‚ÇΩ</p>
                                <p><strong>–ù–∞—á–∏—Å–ª–∏—Ç—Å—è –∑–∞ –∑–∞–∫–∞–∑:</strong> {getBonusEarned()} –±–æ–Ω—É—Å–æ–≤</p>
                            </div>
                        </div>
                    </div>

                    <div className="checkout__cart">
                        <h3>–í–∞—à –∑–∞–∫–∞–∑ ({totalQuantity})</h3>
                        <div className="checkout__items">
                            {cartItems.map(item => (
                                <div key={item.id} className="checkout__item">
                                    <img src={item.product.image} alt={item.product.name}
                                         className="checkout__item-image"/>
                                    <div className="checkout__item-info">
                                        <strong>{item.product.name}</strong>
                                        <p>{item.product.composition}</p>
                                        <p className="checkout__item-quantity">√ó{item.quantity}</p>
                                    </div>
                                </div>
                            ))}
                        </div>

                        <div className="checkout__summary">
                            <div className="checkout__summary-row">
                                <span>–¢–æ–≤–∞—Ä–æ–≤:</span>
                                <span>{totalQuantity} —à—Ç.</span>
                            </div>
                            <div className="checkout__summary-row">
                                <span>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</span>
                                <span>{getTotalAmount()} ‚ÇΩ</span>
                            </div>

                            {formData.deliveryMethod === '–¥–æ—Å—Ç–∞–≤–∫–∞' && (
                                <div className="checkout__summary-row">
                                    <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                                    <span>400 ‚ÇΩ</span>
                                </div>
                            )}

                            {useBonus && bonusToUse > 0 && (
                                <div className="checkout__summary-row checkout__summary-row--discount">
                                    <span>–°–ø–∏—Å–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</span>
                                    <span>- {bonusToUse} ‚ÇΩ</span>
                                </div>
                            )}

                            <div className="checkout__summary-row checkout__summary-total">
                                <span>–ò—Ç–æ–≥–æ:</span>
                                <strong>{getFinalAmount()} ‚ÇΩ</strong>
                            </div>

                            <button type="submit" className="checkout__button-submit" disabled={submitting}>
                                {submitting ? '–û—Ñ–æ—Ä–º–ª—è–µ–º...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
                            </button>
                        </div>
                    </div>
                </form>
            </section>
        </>
    );
};

